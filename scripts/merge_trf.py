#!/usr/bin/env python3

from GaugiKernel          import LoggingLevel, Logger
from GaugiKernel          import GeV
from CaloCell.CaloDefs    import CaloSampling
from G4Kernel             import *
import numpy as np
import argparse
import sys,os, traceback


mainLogger = Logger.getModuleLogger("job")
parser = argparse.ArgumentParser(description = '', add_help = False)
parser = argparse.ArgumentParser()


parser.add_argument('-i','--inputFile', action='store', dest='inputFile', required = True,
                    help = "The event input file generated by the Pythia event generator.")

parser.add_argument('-p','--pileupFile', action='store', dest='pileupFile', required = True,
                    help = "The event HIT file to be merged (pileup)")

parser.add_argument('-o','--outputFile', action='store', dest='outputFile', required = True,
                    help = "The reconstructed event file generated by lzt/geant4 framework.")

parser.add_argument('--nov','--numberOfEvents', action='store', dest='numberOfEvents', required = False, type=int, default=-1,
                    help = "The number of events to apply the reconstruction.")

parser.add_argument('-l', '--outputLevel', action='store', dest='outputLevel', required = False, type=str, default='INFO',
                    help = "The output level messenger.")

parser.add_argument('-c','--command', action='store', dest='command', required = False, default="''",
                    help = "The preexec command")


if len(sys.argv)==1:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()


outputLevel = LoggingLevel.toC(args.outputLevel)

try:

  exec(args.command)

  from GaugiKernel import ComponentAccumulator
  acc = ComponentAccumulator("ComponentAccumulator", args.outputFile)


  # the reader must be first in sequence
  from RootStreamBuilder import RootStreamHITReader, recordable
  
  reader = RootStreamHITReader("HITReader", 
                                InputFile       = args.inputFile,
                                OutputHitsKey   = recordable("Hits"),
                                OutputEventKey  = recordable("Events"),
                                OutputTruthKey  = recordable("Particles"),
                                OutputSeedsKey  = recordable("Seeds"),
                                OutputLevel     = outputLevel,
                              )
  reader.merge(acc)



  from CaloCellBuilder import PileupMerge
  pileup = PileupMerge( "PileupMerge", 
                        InputFile       = args.pileupFile,
                        InputHitsKey    = recordable("Hits"),
                        InputEventKey   = recordable("Events"),
                        OutputHitsKey   = "Hits_Merged",
                        OutputEventKey  = "Events_Merged",
                        OutputLevel     = outputLevel
                      )
  acc += pileup




  from RootStreamBuilder import RootStreamHITMaker
  HIT = RootStreamHITMaker( "RootStreamHITMaker",
                             # input from context
                             InputHitsKey    = "Hits_Merged",
                             InputEventKey   = "Events_Merged",
                             InputTruthKey   = recordable("Particles"),
                             InputSeedsKey   = recordable("Seeds"),
                             # output to file
                             OutputHitsKey   = recordable("Hits"),
                             OutputEventKey  = recordable("Events"),
                             OutputLevel     = outputLevel)
  acc += HIT
  acc.run(args.numberOfEvents)
  sys.exit(0)
  
except  Exception as e:
  traceback.print_exc()
  mainLogger.error(e)
  sys.exit(1)